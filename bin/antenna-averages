#!/usr/bin/env python

usage       = "anteanna_averages.py [--options] FITS"
description = "a simple script that computes averages of a few antenna pattern things. Relies on bayesburst code"
author      = "R. Essick (reed.essick@ligo.org)"

#-------------------------------------------------

import os

import numpy as np
import healpy as hp

from optparse import OptionParser

### non-standard libraries
from skymap_statistics import detector_cache
from skymap_statistics import antenna

#-------------------------------------------------

### parse command line

parser = OptionParser(usage=usage, description=description)

parser.add_option("-v", "--verbose", default=False, action="store_true")

parser.add_option("-o", "--observatory", default=[], type="string", action="append")
parser.add_option("-c", "--coord", default="C", type="string", help="either E or C")

parser.add_option("", "--gps", default=None, type="float", help="must be supplied if --coord=C")

parser.add_option("", "--write-fits", default=False, action='store_true', help='write F+^2+Fx^2 to disk')
parser.add_option("", "--output-dir", default=".", type='string')
parser.add_option("", "--tag", default="", type="string")

opts, args = parser.parse_args()

if opts.coord=="C" and opts.gps==None:
    opts.gps = float(raw_input("gps = "))

if len(args)!=1:
    raise ValueError("Please supply exactly one input argument\n%s"%(usage))
fitsname = args[0]

if opts.write_fits and (not os.path.exists(opts.output_dir)):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

#---------------------------------------------

if opts.verbose:
    print( "reading map from %s"%fitsname )

### load map
post = hp.read_map( fitsname, verbose=False )

for ifo in opts.observatory:
    if opts.write_fits:
        new_fitsname = "%s/%s-antennaNorm%s.fits"%(opts.output_dir, ifo, opts.tag)
        if opts.verbose:
            print( "writing antenna patterns into : %s"%(new_fitsname) )
    else:
        new_fitsname = None

    if ifo not in detector_cache.detectors:
        raise ValueError('ifo=%s not understood'%ifo)
    MAP, AVE = antenna.summarize( post, detector_cache.detectors[ifo], coord=opts.coord, gps=opts.gps, fitsname=new_fitsname )

    print( ifo )
    print( "    MAP:\n        F+^2 + Fx^2 = %.9f\n        F+ = %.9f\n        Fx = %.9f"%MAP )
    print( "    ave:\n        F+^2 + Fx^2 = %.9f\n        F+ = %.9f\n        Fx = %.9f"%AVE )
