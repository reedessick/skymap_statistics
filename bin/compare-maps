#!/usr/bin/env python

usage       = "compare_maps.py [--options] label1,fits1 label2,fits2 ..."
description = "computes several comparison statistics for the FITs files provided. Computes comparison statistics for all possible pairings (downsampling the finner resolution map if needed)"
author      = "reed.essick@ligo.org"

#==========================================================

import numpy as np
import healpy as hp

from optparse import OptionParser

### non-standard libraries
from skymap_statistics import stats

#==========================================================

parser = OptionParser(usage=usage, description=description)

parser.add_option("-v", "--verbose", default=False, action="store_true")
parser.add_option("-V", "--Verbose", default=False, action="store_true")

parser.add_option("-d", "--degrees", default=False, action="store_true")
parser.add_option("-r", "--rankmap", default=False, action="store_true", help="make comparisons with rankmaps instead of probability maps")

parser.add_option("", "--dMAP", default=False, action="store_true", help="compute the angular separation between maximum a posteriori points")

parser.add_option("", "--fidelity", default=False, action="store_true", help="compute the fidelity between maps")
parser.add_option("", "--joint-entropy", default=False, action="store_true", help="compute joint entropy between maps")

parser.add_option("", "--symKL", default=False, action="store_true", help="compute symmetric KLdivergence between maps")
parser.add_option("", "--symKL-walk", default=False, action="store_true", help="compute symmetric KL divergence hierarchically to average out edge effects")
parser.add_option("", "--mse", default=False, action="store_true", help="compute the mean square error between maps")
parser.add_option("", "--peak-snr", default=False, action="store_true", help="compute peak snr between maps")
parser.add_option("", "--structural-similarity", default=False, action="store_true", help="compute structural similarity between maps")
parser.add_option("", "--pearson", default=False, action="store_true", help="compute pearson correlation coefficient between maps")
parser.add_option("", "--dot", default=False, action="store_true", help="compute normalized dot product between maps")

parser.add_option("-s", "--spotcheck", default=[], type="float", action="append", help="compute spot check at these confidence levels")

parser.add_option("-c", "--credible-interval", default=[], type='float', action='append', help='compute the overlap and intersection of the credible intervals reported in the maps')

opts, args = parser.parse_args()

opts.verbose = opts.verbose or opts.Verbose

opts.credible_interval = sorted(opts.credible_interval)

maps = {}
for arg in args:
    label, fits = arg.split(",")
    maps[label] = {"fits":fits}

labels = sorted(maps.keys())

#==========================================================

if opts.degrees:
    unit = "deg"
    areaunit = "deg2"
    angle_conversion = 180/np.pi
else:
    unit = "radians"
    areaunit = "steradians"
    angle_conversion = 1.0

#==========================================================
### load posteriors from fits files

for label in labels:
    d = maps[label]
    fits = d['fits']
    if opts.verbose:
        print( "reading map from", fits )
    post, header = hp.read_map( fits, h=True, verbose=False )
    npix = len(post)
    if (dict(header)['ORDERING']=='NEST'): ### convert to RING ordering
        post = hp.nest2ring(nside, post)
    nside = hp.npix2nside(npix)
    if opts.verbose:
        print( "    nside=%d"%nside )

    if opts.rankmap: ### convert maps to rankmpas, not posteriors
        post = stats.rankmap( post, npix=npix, normed=True )

    d['post'] = post
    d['npix'] = npix
    d['nside'] = nside
    d['estang'] = stats.estang(post, nside=nside)

#=================================================
### iterate through pairs and compute statistics

for ind, label1 in enumerate(labels):
    d1 = maps[label1]
    Post1 = d1['post']
    nside1 = d1['nside']

    for label2 in labels[ind+1:]:

        d2 = maps[label2]
        Post2 = d2['post']
        nside2 = d2['nside']

        print( "%s vs %s"%(label1, label2) )

        ### resample if needed
        nside = max(nside1, nside2)
        pixarea = hp.nside2pixarea(nside, degrees=opts.degrees)

        if nside2 < nside:
            if opts.verbose:
                print( "    resampling %s : %d -> %d"%(label2, nside2, nside) )
            post2 = stats.resample(Post2[:], nside)
        else:
            post2 = Post2[:]
        if nside1 < nside:
            if opts.verbose:
                print( "    resampling %s : %d -> %d"%(label1, nside1, nside) )
            post1 = stats.resample(Post1[:], nside)
        else:
            post1 = Post1[:]

        if opts.verbose:
            print( "    nside : %d"%(nside) )
            print( "    pixarea : %.6f %s"%(pixarea, areaunit) )

        messages = []

        ### compute statistics
        if opts.dMAP:
            if opts.Verbose:
                print( "        dMAP" )
            t1, p1 = d1['estang']
            t2, p2 = d2['estang']
            messages.append( "dtheta_MAP : %.5f %s"%(angle_conversion*np.arccos(stats.cos_dtheta(t1, p1, t2, p2, safe=True)), unit) )

        if opts.fidelity:
            if opts.Verbose:
                print( "        fidelity" )
            messages.append( "fidelity : %.5f"%(stats.fidelity(post1, post2)) )

        if opts.joint_entropy:
            if opts.Verbose:
                print( "        joint_entropy" )
            messages.append( "joint entropy : %.5f %s"%(pixarea * 2**(stats.indep_joint_entropy(post1, post2, base=2.0)), areaunit) )

        if opts.symKL:
            if opts.Verbose:
                print( "        symKL" )
            messages.append( "symmetric KL divergence : %.5f"%stats.symmetric_KLdivergence(post1, post2) )

        if opts.symKL_walk:
            if opts.Verbose:
                print( "        symKL_walk" )
            messages.append( "hierarchical symmetric KL divergence : %.5f at nside=%d"%stats.symmetric_KLdivergence_walk( post1, post2, base=2.0, nside=nside ) )

        if opts.mse:
            if opts.Verbose:
                print( "        mse" )
            messages.append( "mean square error : %.5e"%stats.mse(post1, post2) )

        if opts.peak_snr:
            if opts.Verbose:
                print( "        peak_snr" )
            messages.append( "peak SNR : (%.5f, %.5f)"%(stats.peak_snr(post1, post2)) )

        if opts.structural_similarity:
            if opts.Verbose:
                print( "        structural_similarity" )
            messages.append( "structural similarity : %.5f"%stats.structural_similarity(post1, post2, c1=0.01*np.minimum(np.mean(post1),np.mean(post2)), c2=0.01*np.minimum(np.var(post1), np.var(post2)) ) )

        if opts.pearson:
            if opts.Verbose:
                print( "        pearson" )
            messages.append( "pearson : %.5f"%stats.pearson(post1, post2) )

        if opts.dot:
            if opts.Verbose:
                print( "        dot" )
            messages.append( "dot : %.5f"%stats.dot(post1, post2) )

        if opts.spotcheck:
            if opts.Verbose:
              print( "        spotcheck" )
            p12, p21 = stats.spotcheck(post1, post2, opts.spotcheck)
            for conf, a, b in zip( opts.spotcheck, p12, p21 ):
                messages.append( "spotcheck %.3f %s: (%.5f, %.5f)"%(conf*100, "%", a, b) )

        if opts.Verbose:
            print( "        Credible Regions" )
        for conf, pix1, pix2 in zip(opts.credible_interval, stats.credible_region(post1, opts.credible_interval), stats.credible_region(post2, opts.credible_interval) ):
            if opts.Verbose:
                print( "        CR: %.6f"%(conf) )
            header = "%.3f %s CR"%(conf*100, "%")

            messages.append( "%s : %s = %.3f %s"%(header, label1, pixarea*len(pix1) , areaunit) )
            messages.append( "%s : %s = %.3f %s"%(header, label2, pixarea*len(pix2) , areaunit) )

            if opts.Verbose:
                print( "        geometric_overlap" )
            i, u = stats.geometric_overlap(pix1, pix2, nside=nside, degrees=opts.degrees)
            messages.append( "%s : intersection = %.3f %s"%(header, i, areaunit) )
            messages.append( "%s : union = %.3f %s"%(header, u, areaunit) )

        for message in messages:
            print( "    "+message )
